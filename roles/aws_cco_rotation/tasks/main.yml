---
# AWS CCO Rotation Role - Main Tasks
# This role handles all AWS IAM interactions for credential rotation

- name: Get OCP cluster infrastructure (GUID)
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
  register: cluster_infrastructure_info

- name: Extract cluster name from cluster infrastructure
  ansible.builtin.set_fact:
    ocp_cluster_name: "{{ cluster_infrastructure_info.resources[0].status.infrastructureName }}"
  when: cluster_infrastructure_info.resources | length > 0

- name: Fail if cluster name could not be determined
  ansible.builtin.fail:
    msg: "Unable to determine OpenShift cluster infrastructure name"
  when: ocp_cluster_name is not defined

- name: Construct IAM user name
  ansible.builtin.set_fact:
    iam_user_name: "{{ aws_iam_user_prefix }}-{{ ocp_cluster_name }}"

- name: Get current aws-creds secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: aws-creds
    namespace: kube-system
  register: current_aws_creds_secret

- name: Extract current access key ID from aws-creds secret
  ansible.builtin.set_fact:
    current_access_key_id: "{{ current_aws_creds_secret.resources[0].data.aws_access_key_id | b64decode }}"
  when: 
    - current_aws_creds_secret.resources | length > 0
    - current_aws_creds_secret.resources[0].data.aws_access_key_id is defined

- name: Discovery and cleanup of old IAM user 

# No amazon.aws module can do a reverse lookup of the access key 
# to the user name, but this can be achieved with the 
# "get-access-key-last-used"a command which  is a bit of a hack...

  block:
    - name: Find IAM user associated with current access key
      ansible.builtin.command:
        cmd: "aws iam get-access-key-last-used --access-key-id {{ current_access_key_id }} --profile {{ aws_profile }} --query 'UserName' --output text"
      register: access_key_user_lookup
      failed_when: false
      changed_when: false

    - name: Set current IAM user name from lookup result
      ansible.builtin.set_fact:
        current_iam_user_name: "{{ access_key_user_lookup.stdout.strip() }}"
      when: 
        - access_key_user_lookup.stdout is defined
        - access_key_user_lookup.stdout.strip() != ""
        - access_key_user_lookup.stdout.strip() != "None"

    - name: Display discovered current IAM user
      ansible.builtin.debug:
        msg: "✅ Found current IAM user {{ current_iam_user_name }} associated with access key"
      when: current_iam_user_name is defined

    - name: Prompt for old IAM user deletion
      ansible.builtin.pause:
        prompt: |-
          
          WARNING: The following IAM user will be deleted as part of the credential rotation:
          
          IAM User: {{ current_iam_user_name }}
          
          This user will be recreated with a standardized name ({{ iam_user_name }}) and new credentials.
          All existing access keys for this user will be permanently removed. 
          If the user to be deleted is "ocp-credential-manager-<GUID>" you can safely proceed.
          
          Do you want to continue with deleting {{ current_iam_user_name }}? (y/N)
      register: delete_old_user_response
      when: current_iam_user_name is defined

    - name: Delete old IAM user
      amazon.aws.iam_user:
        name: "{{ current_iam_user_name }}"
        state: absent
      when: 
        - current_iam_user_name is defined
        - delete_old_user_response.user_input | default('') | lower == 'y'
      register: old_user_deletion

    - name: Display cleanup of old IAM user
      ansible.builtin.debug:
        msg: "Deleted old IAM user {{ current_iam_user_name }} (will recreate as {{ iam_user_name }})"
      when: 
        - old_user_deletion is defined
        - old_user_deletion.changed

    - name: Display skipped IAM user deletion
      ansible.builtin.debug:
        msg: "Skipped deletion of old IAM user {{ current_iam_user_name }} (user chose not to delete)"
      when: 
        - current_iam_user_name is defined
        - delete_old_user_response.user_input | default('') | lower != 'y'

  when: current_access_key_id is defined

- name: Display standardized IAM user that will be used
  ansible.builtin.debug:
    msg: "Will create/use standardized IAM user: {{ iam_user_name }}"

- name: Ensure IAM user exists
  amazon.aws.iam_user:
    name: "{{ iam_user_name }}"
    state: present
  register: iam_user_creation

- name: Display IAM user creation result
  ansible.builtin.debug:
    msg: |-
      {% if iam_user_creation.changed %}
      ✅ Created new IAM user: {{ iam_user_name }}
      {% else %}
      ✅ IAM user already exists: {{ iam_user_name }}
      {% endif %}

- name: Ensure CCO permissions policy is attached to IAM user
  amazon.aws.iam_policy:
    iam_type: user
    iam_name: "{{ iam_user_name }}"
    policy_name: "{{ cco_iam_policy_name }}"
    state: present
    policy_json: "{{ cco_iam_policy_document | to_json }}"

- name: Create new AWS access key for standardized IAM user
  amazon.aws.iam_access_key:
    user_name: "{{ iam_user_name }}"
    state: present
  register: new_aws_creds
  no_log: true

- name: Verify new access key exists
  ansible.builtin.debug:
    msg: "New access key created successfully for user {{ iam_user_name }}"
  when: new_aws_creds.access_key is defined

- name: Base64 encode new AWS credentials
  ansible.builtin.set_fact:
    new_access_key_id_b64: "{{ new_aws_creds.access_key_id | b64encode }}"
    new_secret_access_key_b64: "{{ new_aws_creds.secret_access_key | b64encode }}"
  no_log: true
  